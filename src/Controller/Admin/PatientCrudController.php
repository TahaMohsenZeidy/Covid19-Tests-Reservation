<?php

namespace App\Controller\Admin;

use App\Entity\Patient;
use Doctrine\ORM\EntityManagerInterface;
use EasyCorp\Bundle\EasyAdminBundle\Controller\AbstractCrudController;
use Symfony\Component\Security\Core\Encoder\UserPasswordEncoderInterface;

class PatientCrudController extends AbstractCrudController
{
    /**
     * @var UserPasswordEncoderInterface
     */
    private $passwordEncoder;

    public function __construct(UserPasswordEncoderInterface $passwordEncoder)
    {
        $this->passwordEncoder = $passwordEncoder;
    }

    public static function getEntityFqcn(): string
    {
        return Patient::class;
    }


//    public function configureFields(string $pageName): iterable
//    {
//        return [
//            Field::new('firstname'),
//            Field::new('lastname'),
//            Field::new('birthdate'),
//            Field::new('nationality'),
//            Field::new('email'),
//            Field::new('address'),
//            Field::new('age'),
//            Field::new('gender'),
//            Field::new('identifier')
//                ->setFormType(PasswordType::class),
//            Field::new('gsm'),
//            AssociationField::new('medical_history')
//        ];
//    }

    /**
     * @param EntityManagerInterface $entityManager
     * @param Patient $entityInstance
     */
    public function persistEntity(EntityManagerInterface $entityManager, $entityInstance): void
    {
        echo("what the fuck is happening over here");
        $this->encodeUserPassword($entityInstance);
        parent::persistEntity($entityManager, $entityInstance); // TODO: Change the autogenerated stub
    }

    /**
     * @param EntityManagerInterface $entityManager
     * @param Patient $entityInstance
     */
    public function updateEntity(EntityManagerInterface $entityManager, $entityInstance): void
    {
        echo($entityInstance->getFirstname());
        $this->encodeUserPassword($entityInstance);
        parent::updateEntity($entityManager, $entityInstance); // TODO: Change the autogenerated stub
    }

    /**
     * @param Patient $entity
     */
    public function encodeUserPassword($entity):void
    {
        $entity->setIdentifier(
            $this->passwordEncoder->encodePassword(
                $entity,
                $entity->getPassword()
            )
        );
    }

}
